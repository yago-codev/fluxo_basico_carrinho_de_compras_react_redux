01) Instalar o redux e a integração do react com o redux:

    yarn add redux react-redux


02) Criar uma pasta na raíz da pasta src, chamada "store"


03) Dentro da pasta store será criado o arquivo de entrada "index.js"


04) No arquivo index.js, importaremos a função createStore de dentro do redux:

    import { createStore } from 'redux';


05) Ainda no arquivo index.js, criaremos uma constante que irá receber a função createStore:

    const store = createStore();


06) Por fim iremos exportar a constante store:

    export default store;


07) Dentro do componente raíz, iremos importar o Provider do react-redux.

    O que o Provider faz?
    O Provider irá disponibilizar o Store da aplicação.
    O Store é o estado global,
    ou seja,
    o estado que será compartilhado entre os componentes desejados.

    Para podermos disponibilizar esse estado global para todos os demais componentes,
    a melhor estratégia a ser adotada é importar o Provider do react-redux e
    envolver todos os demais componentes que estão contídos no componente raíz "App.js"


    import React from 'react';
    import { BrowserRouter } from 'react-router-dom';
    import { Provider } from 'react-redux'; <==

    import Routes from './routes';
    import Header from './components/Header';

    import GlobalStyle from './styles/global';

    function App() {
      return (
        <Provider> <==
          <BrowserRouter>
            <GlobalStyle />
            <Header />
            <Routes />
          </BrowserRouter>
        </Provider> <==
      );
    }

    export default App;


08) Além de importar o Provider,
    precisaremos importar também o store,
    pois ele será passado como parâmetro para o atributo store do próprio Provider:

    import React from 'react';
    import { BrowserRouter } from 'react-router-dom';
    import { Provider } from 'react-redux';

    import Routes from './routes';
    import Header from './components/Header';
    import store from './store'; <==

    import GlobalStyle from './styles/global';

    function App() {
      return (
        <Provider store={store}> <==
          <BrowserRouter>
            <GlobalStyle />
            <Header />
            <Routes />
          </BrowserRouter>
        </Provider>
      );
    }

    export default App;


09) Agora precisaremos incorporar um Reducer ao store.
    O Reducer é o estado/informação global que será compartilhada através do Redux.

    Iremos criar esses reducers como funções,
    e dentro dessa função nós teremos o estado inicial do Reducer.

    Nosso primeiro Reducer será uma função chamada cart,
    tendo em vista que iremos compartilhar o estado do carrinho tanto no Header
    quando na página Cart.

    import { createStore } from 'redux';

    function cart() { <==
      return []; <==
    } <==

    const store = createStore();

    export default store;


10) Para facilitarmos e organizarmos esses Reducers,
    não iremos manter-los no mesmo arquivo de entrada da pasta store.
    Ao invés disso,
    criaremos uma pasta chamada "modules" dentro da própria pasta "store"


11) Dentro da pasta modules iremos criar uma pastinha chamada "cart"

    Porque?
    Porque poderemos ter diversos Reducers na aplicação,
    portanto faz muito sentido que esses reducers sejam separados dentro de
    suas próprias pastinhas, dentro da pasta pai "modules".


12) Agora dentro da pastinha "cart", respectiva ao Reducer do carrinho,
    iremos apenas copiar a função cart que havia sido introduzida no store:

    export default function cart() {
      return [];
    }


13) Agora retornaremos ao arquivo store para podermos importar o Reducer recém criado:

    import { createStore } from 'redux';

    import reducer from './modules/cart/reducer'; <==

    const store = createStore();

    export default store;


14) Por fim precisaremos integrar esse Reducer a função createStore:

    import { createStore } from 'redux';

    import reducer from './modules/cart/reducer';

    const store = createStore(reducer); <==

    export default store;


15) Refatorando o store para utilizarmos múltiplos reducers:

    Como já mencionado,
    poderemos criar múltiplos reducers para
    disponibilizarmos o estado para os demais componentes.

    No presente momento,
    configuramos o store para utilizar somente o reducer do carrinho "cart".

    Se quisermos usar múltiplos reducers,
    precisaremos criar um arquivo raíz que irá exportar todos os Reducers
    contidos na pastinha modules.

    Esse arquivo raíz deverá ser criado dentro da pasta "modules"
    e irá se chamar "rootReducer.js"


16) Dentro do "rootReducer", precisaremos importar a "cola"
    que irá agrupar/combinar todos os reducers contidos na pastinha "modules".

    import { combineReducers } from 'redux';


17) Agora basta importar os reducer presentes na pastinha modules:

    import { combineReducers } from 'redux';

    import cart from './cart/reducer';


18) Por fim, basta exportar a função combineReducers,
    passando um objeto como parâmetro.
    Esse objeto irá conter os reducers que serão incorporados no store.

    import { combineReducers } from 'redux';

    import cart from './cart/reducer';

    export default combineReducers({
      cart,
    });


19) Refatorando o store/index.js para utilizarmos o rootReducer:

    Era assim:

    import { createStore } from 'redux';

    import reducer from './modules/cart/reducer';

    const store = createStore(reducer);

    export default store;


    Ficou assim:

    import { createStore } from 'redux';

    import rootReducer from './modules/rootReducer'; <==

    const store = createStore(rootReducer); <==

    export default store;


20) Pronto, o Redux já está configurado!
