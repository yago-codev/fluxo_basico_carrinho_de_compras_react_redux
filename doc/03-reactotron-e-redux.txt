01) O Reactotron vai ser utilizado para
    debugarmos nossa aplicação quando estivermos utilizando o Redux.


02) Instalando reactron-react-js e reactotron-redux

    yarn add reactotron-react-js reactotron-redux


03) Criando o arquivo de configuração do reactotron:

    Onde?
    Iremos criar uma pasta chamada config, na raíz da pastinha src.
    Dentro de config, será criado o arquivo "ReactotronConfig.js"


04) Importando Reactotron e o reactotronRedux:

    import Reactotron from 'reactotron-react-js';
    import { reactotronRedux } from 'reactotron-redux';


05) Verificando se estamos em ambiente de desenvolvimento:

    if (process.env.NODE_ENV === 'development') {

    }


06) Criando a variável contendo a configuração do reactotron com o redux:

    import Reactotron from 'reactotron-react-js';
    import { reactotronRedux } from 'reactotron-redux';

    if (process.env.NODE_ENV === 'development') {
      const tron = Reactotron.configure().use(reactotronRedux()).connect();

      tron.clear();

      console.tron = tron;
    }


07) Agora dentro do arquivo de entrada da pasta store,
    precisaremos configurar o reactotron.

    Como isso será feito?
    Criaremos uma variável que irá utilizar uma condição ternária para
    verificar se estamos em ambiente de desenvolvimento.
    Caso estejamos, iremos acessar a função createEnhancer(),
    que estará disponível no console.tron.
    Caso não estejamos em ambiente de desenvolvimento,
    retornaremos apenas um null.

    Tendo feito isso,
    passaremos essa variável enhancer como segundo parâmetro pra
    função createStore():

    import { createStore } from 'redux';

    import rootReducer from './modules/rootReducer';

    const enhancer = <==
      process.env.NODE_ENV === 'development' ? console.tron.createEnhancer() : null; <==

    const store = createStore(rootReducer, enhancer); <==

    export default store;


08) Importando o arquivo de configuração do reactotron no componente principal "App.js":

    OBS: essa importação deve ser feita antes do arquivo store

    import React from 'react';
    import { BrowserRouter } from 'react-router-dom';
    import { Provider } from 'react-redux';

    import './config/ReactotronConfig';
    import Routes from './routes';
    import Header from './components/Header';
    import store from './store';

    import GlobalStyle from './styles/global';


09) Pronto, o Reactotron já está integrado ao react e ao redux.

    Agora já podemos abrir o programinha,
    e quando dispararmos alguma action,
    instantaneamente ela será refletida no Reactotron,
    onde teremos um log, contendo o type e também aquilo que foi
    enviado na action.

    No próprio Reactotron poderemos repetir o disparo das actions,
    ou até mesmo editar o conteúdo da action manualmente.


10) Criando subscription.

    Pra que serve?
    Através da aba State do Reactotron,
    poderemos criar subscriptions,
    que irão nos ajudar a acessarmos o estado contido num determinado reducer.

    Nesse caso,
    criaremos uma subscription chamada "cart",
    e automaticamente teremos acesso a tudo que está presente dentro do estado desse reducer.


11) Criando cópias do estado.

    Pra que?
    Cópias do estado serão úteis quando estivermos testando
    alguma determinada funcionalidade do componente,
    que necessite que tenhamos um determinado numero de produtos, por exemplo...
    Para resolvermos isso, poderemos criar um "snapshot",
    e através do botão upload, faremos uma injeção desse snapshot.
